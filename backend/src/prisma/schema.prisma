model AuditLog {
  id         Int      @id @default(autoincrement())
  userEmail  String
  action     String
  entityType String
  entityId   Int?
  detail     String?
  ipAddress  String?
  createdAt  DateTime @default(now())
}
// backend/src/prisma/schema-update.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

model Organization {
  id                    Int       @id @default(autoincrement())
  name                  String
  ownerId               Int       // User ID cá»§a owner
  subscriptionPlan      String    @default("FREE")
  subscriptionId        String?   // Stripe subscription ID
  stripeCustomerId      String?   // Stripe customer ID
  subscriptionExpiresAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  users                 User[]
  hosts                 Host[]
  teams                 Team[]
  apiKeys               ApiKey[]
}

model Team {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  users          UserTeam[]
  hosts          HostTeam[]
}

model UserTeam {
  userId    Int
  teamId    Int
  role      String    @default("MEMBER") // OWNER, ADMIN, MEMBER
  createdAt DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@id([userId, teamId])
}

model HostTeam {
  hostId    Int
  teamId    Int
  createdAt DateTime  @default(now())
  
  host      Host      @relation(fields: [hostId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@id([hostId, teamId])
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  passwordHash   String
  name           String?
  role           String    @default("USER")  // ADMIN, USER
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  hosts          Host[]
  teams          UserTeam[]
  sessions       Session[]
  notifications  Notification[]
  apiKeys        ApiKey[]
}

model Host {
  id             Int       @id @default(autoincrement())
  ip             String
  port           Int
  uid            String
  pwdEnc         String    // AES-256-GCM base64 payload (iv:ciphertext:authTag)
  purchasedAt    DateTime
  expiredAt      DateTime
  notes          String?
  status         String    @default("ACTIVE")  // ACTIVE, INACTIVE, EXPIRED
  lastCheckedAt  DateTime?
  lastCheckStatus String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  teams          HostTeam[]
  alerts         Alert[]
  
  @@index([expiredAt])
  @@index([ip, port])
  @@index([status])
}

model ApiKey {
  id             Int       @id @default(autoincrement())
  name           String
  key            String    @unique
  lastUsedAt     DateTime?
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([key])
}

model Session {
  id             String    @id @default(uuid())
  token          String    @unique
  expiresAt      DateTime
  createdAt      DateTime  @default(now())
  ipAddress      String?
  userAgent      String?
  
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Alert {
  id             Int       @id @default(autoincrement())
  type           String    // EXPIRY, DOWN, SECURITY
  message        String
  status         String    @default("PENDING")  // PENDING, RESOLVED, DISMISSED
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  resolvedAt     DateTime?
  
  hostId         Int?
  host           Host?     @relation(fields: [hostId], references: [id], onDelete: SetNull)
}

model Notification {
  id             Int       @id @default(autoincrement())
  type           String    // EMAIL, SMS, PUSH, SLACK, TELEGRAM
  message        String
  status         String    @default("PENDING")  // PENDING, SENT, FAILED
  createdAt      DateTime  @default(now())
  sentAt         DateTime?
  
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Board {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String   @default("todo") // todo, inprogress, done
  boardId     Int
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
